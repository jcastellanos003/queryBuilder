{"version":3,"sources":["directives/queryBuilder/core/queryTranspiler.ts"],"names":[],"mappings":";AAEA,2BAA2B,cAAc,CAAC,CAAA;AAE1C,IAAc,UAAU,CA2JvB;AA3JD,WAAc,UAAU;IAAC,IAAA,IAAI,CA2J5B;IA3JwB,WAAA,IAAI,EAAC,CAAC;QAE3B;YA0BE;gBACI,IAAI,CAAC,SAAS,GAAG,uBAAU,CAAC,OAAO,CAAC;gBACpC,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC;gBAC/B,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC;gBACrC,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC;gBACpC,IAAI,CAAC,gBAAgB,GAAG,GAAG,CAAC;gBAC5B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;gBAC3C,IAAI,CAAC,mBAAmB,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;gBACpD,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC;gBACjC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;gBACzB,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;gBAC3B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;gBAChC,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC;YACnC,CAAC;YAED,0CAAc,GAAd,UAAe,QAA6B;gBAA5C,iBAiCC;gBAhCG,IAAI,KAAK,GAAW,EAAE,CAAC;gBACvB,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAqB,EAAE,GAAW;oBAChD,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;oBAC/C,MAAM,CAAA,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;wBAClB,KAAK,uBAAU,CAAC,OAAO;4BACrB,KAAK,IAAI,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;4BACxD,KAAK,CAAC;wBACR,KAAK,uBAAU,CAAC,aAAa;4BAC3B,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,cAAc,GAAG,KAAK,CAAC;4BAClD,KAAI,CAAC,WAAW,GAAG,OAAO,CAAC,QAAQ,KAAK,KAAI,CAAC,UAAU,CAAC;4BACxD,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC;4BACtB,KAAK,CAAC;wBACR,KAAK,uBAAU,CAAC,aAAa,CAAC;wBAC5B,KAAK,uBAAU,CAAC,WAAW,CAAC;wBAC1B,KAAK,uBAAU,CAAC,wBAAwB;4BACtC,KAAI,CAAC,qBAAqB,GAAG,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;4BACvF,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,uBAAU,CAAC,wBAAwB,CAAC,CAAC,CAAC;gCACvD,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gCACxF,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;4BACpF,CAAC;4BACD,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,uBAAU,CAAC,WAAW,IAAI,CAAC,KAAI,CAAC,cAAc,IAAI,KAAI,CAAC,cAAc,CAAC,GAAG,KAAI,CAAC,eAAe,GAAG,GAAG,GAAG,GAAG,GAAE,EAAE,CAAC;kCACvI,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;4BACrD,KAAK,CAAC;wBACR,KAAK,uBAAU,CAAC,cAAc;4BAC5B,KAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,KAAI,CAAC,OAAO,CAAC;4BAChE,KAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,KAAI,CAAC,OAAO,CAAC;4BACrE,KAAK,IAAI,KAAI,CAAC,6BAA6B,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BACjG,KAAK,CAAC;oBACZ,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,KAAK;oBACZ,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,uBAAU,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;YAC/J,CAAC;YAEO,yDAA6B,GAArC,UAAsC,OAAqB,EAAE,WAAyB,EAAE,cAA4B;gBAChH,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC;YACtJ,CAAC;YAEO,oDAAwB,GAAhC,UAAiC,WAAyB,EAAE,cAA4B;gBACpF,EAAE,CAAA,CAAC,WAAW,CAAC,IAAI,KAAK,uBAAU,CAAC,cAAc,CAAC;oBAAC,MAAM,CAAC,EAAE,CAAC;gBAC7D,EAAE,CAAA,CAAC,cAAc,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC;oBAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC;gBAC3E,EAAE,CAAA,CAAC,IAAI,CAAC,cAAc,CAAC;oBAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBACtD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;YACjC,CAAC;YAEO,oDAAwB,GAAhC,UAAiC,WAAyB;gBACtD,EAAE,CAAA,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,YAAY,CAAC;oBAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBACvF,EAAE,CAAA,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC;oBAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBACzI,EAAE,CAAA,CAAC,IAAI,CAAC,qBAAqB,CAAC;oBAAC,MAAM,CAAC,GAAG,CAAC;gBAC1C,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAEO,yCAAa,GAArB,UAAsB,KAAa;gBAC/B,IAAI,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;gBACtG,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;oBAClB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAC/E,CAAC;gBAED,EAAE,CAAA,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA,CAAC;oBACvD,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;wBAAC,MAAM,CAAI,KAAK,kBAAe,CAAC;oBACxD,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;wBAAC,MAAM,CAAI,KAAK,kBAAe,CAAC;oBACzD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACrB,MAAM,CAAC,MAAI,KAAK,yBAAoB,KAAK,mBAAgB,CAAC;oBAC7D,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC;wBACjC,MAAM,CAAC,GAAG,GAAG,KAAK,GAAG,GAAG,CAAC;gBAC/B,CAAC;gBACD,EAAE,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAAC,MAAM,CAAC,GAAG,GAAG,KAAK,GAAG,GAAG,CAAA;gBAC9C,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YAEO,yCAAa,GAArB,UAAsB,QAAgB;gBAClC,IAAI,YAAY,GAAG;oBAEf,GAAG,EAAE,IAAI;oBACT,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,QAAQ;oBACf,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,QAAQ;oBAEd,GAAG,EAAE,IAAI;oBACT,GAAG,EAAE,IAAI;oBACT,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,KAAK;oBAEX,aAAa,EAAE,GAAG;oBAClB,WAAW,EAAE,IAAI;oBACjB,UAAU,EAAE,KAAK;oBACjB,WAAW,EAAE,eAAe;oBAE5B,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE,IAAI;oBACV,SAAS,EAAE,IAAI;oBACf,KAAK,EAAE,cAAc;oBACrB,QAAQ,EAAE,cAAc;oBACxB,KAAK,EAAE,cAAc;oBAErB,KAAK,EAAE,OAAO;oBACd,IAAI,EAAE,MAAM;oBACZ,GAAG,EAAE,OAAO;oBACZ,GAAG,EAAE,MAAM;oBACX,UAAU,EAAE,QAAQ;oBAEpB,KAAK,EAAE,OAAO;oBACd,MAAM,EAAE,QAAQ;iBACnB,CAAC;gBACF,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC;YACH,wBAAC;QAAD,CAxJA,AAwJC,IAAA;QAxJY,sBAAiB,oBAwJ7B,CAAA;IACL,CAAC,EA3JwB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA2J5B;AAAD,CAAC,EA3Ja,UAAU,GAAV,kBAAU,KAAV,kBAAU,QA2JvB","file":"directives/queryBuilder/core/queryTranspiler.js","sourcesContent":["import { QueryElement } from './queryElement';\r\nimport { IQueryTranspiler } from './transpiler';\r\nimport { QueryState } from './queryState';\r\n\r\nexport module transpiler.core {\r\n\r\n    export class ESQueryTranspiler implements IQueryTranspiler {\r\n      lastState: number;\r\n\r\n      concatOpInValues: string;\r\n      concatOpBetweenValues: string;\r\n      concatStartsWith: string;\r\n      concatNorInValues: string;\r\n      concatNotContains: string;\r\n\r\n      advancedOps: Array<string>;\r\n      advancedNegativeOps: Array<string>;\r\n      negativeOps: Array<string>;\r\n\r\n      hasAdvancedOps: boolean;\r\n      hasNegativeOps: boolean;\r\n      isBetweenFirst: boolean;\r\n      isBetweenSecond: boolean;\r\n      isDateRange: boolean;\r\n      isNegativeNotForRange: boolean;\r\n\r\n      STARTS_WITH: string;\r\n      BETWEEN: string;\r\n      CONTAINS: string;\r\n      NOT_CONTAINS: string;\r\n      DATE_RANGE: string;\r\n\r\n      constructor() {\r\n          this.lastState = QueryState.INITIAL;\r\n          this.concatOpInValues = \" OR \";\r\n          this.concatNorInValues = \" AND NOT \";\r\n          this.concatOpBetweenValues = \" TO \";\r\n          this.concatStartsWith = \"*\";\r\n          this.concatNotContains = \"*)\";\r\n          this.advancedOps = [\"IN\", \"==\", \"BETWEEN\"];\r\n          this.advancedNegativeOps = [\"!IN\", \"NOT IN\", \"!==\"];\r\n          this.negativeOps = [\"!=\", \"!IS\", \"IS NOT\", \"<>\"];\r\n          this.STARTS_WITH = 'STARTS WITH';\r\n          this.BETWEEN = 'BETWEEN';\r\n          this.CONTAINS = 'CONTAINS';\r\n          this.NOT_CONTAINS = '!CONTAINS';\r\n          this.DATE_RANGE = 'DATE_RANGE';\r\n      }\r\n\r\n      transpileQuery(elements: Array<QueryElement>): string {\r\n          let query: string = \"\";\r\n          elements.forEach((element: QueryElement, idx: number) => {\r\n              element.term = element.term.replace(/\\'/g, '');\r\n              switch(element.type) {\r\n                  case QueryState.INITIAL:\r\n                    query += this.parseOperator(element.term.toUpperCase());\r\n                    break;\r\n                  case QueryState.PROPERTY_TERM:\r\n                    this.hasNegativeOps = this.hasAdvancedOps = false;\r\n                    this.isDateRange = element.propType === this.DATE_RANGE;\r\n                    query += element.term;\r\n                    break;\r\n                  case QueryState.OPERATOR_TERM:\r\n                    case QueryState.CONCAT_TERM:\r\n                      case QueryState.PROPERTY_MULTIPLE_VALUES:\r\n                        this.isNegativeNotForRange = this.negativeOps.indexOf(element.term.toUpperCase()) > -1;\r\n                        if (element.type === QueryState.PROPERTY_MULTIPLE_VALUES) {\r\n                            this.hasNegativeOps = this.advancedNegativeOps.indexOf(element.term.toUpperCase()) > -1;\r\n                            this.hasAdvancedOps = this.advancedOps.indexOf(element.term.toUpperCase()) > -1;\r\n                        }\r\n                        query += (element.type === QueryState.CONCAT_TERM && (this.hasAdvancedOps || this.hasNegativeOps) ? this.isBetweenSecond ? ']' : ')': '') \r\n                        + this.parseOperator(element.term.toUpperCase());\r\n                    break;\r\n                  case QueryState.PROPERTY_VALUE:\r\n                    this.isBetweenFirst = elements[(idx - 1)].text === this.BETWEEN;\r\n                    this.isBetweenSecond = elements[(idx - 1) - 1].text === this.BETWEEN;\r\n                    query += this.getQuerySyntaxWhenIsPropValue(element, elements[idx - 1], elements[(idx - 1) - 1]);\r\n                    break;\r\n              }\r\n          });\r\n          return query +\r\n          (elements[elements.length - 1].type === QueryState.PROPERTY_VALUE && (this.hasAdvancedOps || this.hasNegativeOps) ? this.isBetweenSecond ? ']' : ')' : '');\r\n      }\r\n\r\n      private getQuerySyntaxWhenIsPropValue(element: QueryElement, lastElement: QueryElement, preLastElement: QueryElement): string {\r\n          return this.validSyntaxPropertyValue(lastElement, preLastElement) + this.parseEscaping(element.term) + this.validSyntaxOperatorValue(lastElement);\r\n      }\r\n\r\n      private validSyntaxPropertyValue(lastElement: QueryElement, preLastElement: QueryElement): string {\r\n          if(lastElement.type !== QueryState.PROPERTY_VALUE) return '';\r\n          if(preLastElement.text === this.BETWEEN) return this.concatOpBetweenValues;\r\n          if(this.hasNegativeOps) return this.concatNorInValues;\r\n          return this.concatOpInValues;\r\n      }\r\n\r\n      private validSyntaxOperatorValue(lastElement: QueryElement): string {\r\n          if(lastElement.term.toUpperCase() === this.NOT_CONTAINS) return this.concatNotContains;\r\n          if(lastElement.term.toUpperCase() === this.STARTS_WITH || lastElement.term.toUpperCase() === this.CONTAINS) return this.concatStartsWith;\r\n          if(this.isNegativeNotForRange) return ')';\r\n          return '';\r\n      }\r\n\r\n      private parseEscaping(query: string): string {\r\n          let chars = [\"+\", \"&&\", \"||\", \"-\", \"!\", \"(\", \")\", \"{\", \"}\", \"[\", \"]\", \"^\", \"\\\"\", \"~\", \"\\\\\", \":\", \"/\"];\r\n          for (let c in chars) {\r\n              query = query.split(chars[c]).join(\"\\\\\" + chars[c]).replace(/\\\\\\\\/g, '\\\\');\r\n          }\r\n          \r\n          if(/\\d\\d\\d\\d-\\d\\d-\\d\\d$/g.test(query.replace(/\\\\/g, ''))){\r\n             if (this.isBetweenFirst) return `${query}T00\\\\:00\\\\:00`;\r\n             if (this.isBetweenSecond) return `${query}T23\\\\:59\\\\:59`;\r\n             if (!(this.isDateRange)) \r\n                return `[${query}T00\\\\:00\\\\:00 TO ${query}T23\\\\:59\\\\:59]`;\r\n             else if (this.isNegativeNotForRange)\r\n                return '\"' + query + '\"';\r\n          }\r\n          if(/\\s/g.test(query)) return '\"' + query + '\"'\r\n          return query;\r\n      }\r\n\r\n      private parseOperator(operator: string): string {\r\n          let mapOperators = {\r\n              //PRIMITIVE OPERATORS\r\n              \"=\": \":+\",\r\n              \"IS\": \":+\",\r\n              \"!=\": \":(NOT \",\r\n              \"!IS\": \":(NOT \",\r\n              \"IS NOT\": \":(NOT \",\r\n              \"<>\": \":(NOT \",\r\n              //NUMERIC OPERATORS\r\n              \">\": \":>\",\r\n              \"<\": \":<\",\r\n              \">=\": \":>=\",\r\n              \"<=\": \":<=\",\r\n              //STRING OPERATORS\r\n              \"STARTS WITH\": \":\",\r\n              \"ENDS WITH\": \":*\",\r\n              \"CONTAINS\": \":+*\",\r\n              \"!CONTAINS\": \":(* AND NOT *\",\r\n              //ADVANCED OPERATORS\r\n              \"IN\": \":(\",\r\n              \"==\": \":(\",\r\n              \"BETWEEN\": \":[\",\r\n              \"!IN\": \":(* AND NOT \",\r\n              \"NOT IN\": \":(* AND NOT \",\r\n              \"!==\": \":(* AND NOT \",\r\n              //CONCAT OPERATORS\r\n              \"AND\": \" AND \",\r\n              \"OR\": \" OR \",\r\n              \"*\": \" AND \",\r\n              \"+\": \" OR \",\r\n              \"ORDER BY\": \"&sort=\",\r\n              //DIRECTIONAL OPERATORS\r\n              \"ASC\": \",ASC&\",\r\n              \"DESC\": \",DESC&\"\r\n          };\r\n          return mapOperators[operator];\r\n      }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}