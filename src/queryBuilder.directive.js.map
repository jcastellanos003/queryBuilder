{"version":3,"sources":["directives/queryBuilder/queryBuilder.directive.ts"],"names":[],"mappings":"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","file":"directives/queryBuilder/queryBuilder.directive.js","sourcesContent":["/// <reference path=\"../../../../../../../typings/angularjs/angular.d.ts\" />\r\n/// <reference path=\"../../../../../../../typings/rx/rx.d.ts\" />\r\n/// <reference path=\"../../../../../../../typings/rx/rx.async.d.ts\" />\r\n\r\nimport './helpers/polyfill.array.findIndex';\r\nimport './helpers/polyfill.array.find';\r\nimport './helpers/polyfill.string.startsWith';\r\n\r\nimport './queryBuilder.controller';\r\nimport './queryBuilder.service';\r\nimport './queryBuilder.scss';\r\nimport './queryBuilder.constants';\r\n\r\nimport { query } from './core/orchestratorObject';\r\nimport { transpiler } from './core/queryTranspiler';\r\nimport { IQueryBuilderScope, IQueryBuilderController } from './models/component';\r\nimport { IQueryMapKeyboard } from './models/helpers';\r\nimport { QueryState } from './models/objects';\r\n\r\nmodule widgets {\r\n    'use strict';\r\n\r\n    declare var CPALS: any;\r\n    declare var KeyCodes: any;\r\n    declare var autosize: any;\r\n    queryBuilder.$inject = ['queryBuilderConstant'];\r\n\r\n    function queryBuilder(queryBuilderConstant: any): ng.IDirective {\r\n        var directive = <ng.IDirective> {\r\n            restrict: 'EA',\r\n            scope: {\r\n                model: '=model',\r\n                tableView: '=?',\r\n                isDisabled: '=?',\r\n                queryValue: '=?',\r\n                onBeforeOpenNewWindow: '&?',\r\n                openNewWindow: '=?',\r\n                onNewSearch: '=?'\r\n            },\r\n            templateUrl: 'scripts/app/directives/queryBuilder/queryBuilder.html',\r\n            link: queryBuilderlink,\r\n            controller: 'QueryBuilderController',\r\n            controllerAs: 'queryBuilderCtrl'\r\n        };\r\n\r\n        function queryBuilderlink(scope: IQueryBuilderScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes, controller: IQueryBuilderController): void {\r\n            let input: HTMLTextAreaElement = <HTMLTextAreaElement>element.find('textarea')[0],\r\n                newSearchLink : ng.IAugmentedJQuery = element.find('a.new-search'),\r\n                searchButton = element.find('#glassSearch'),\r\n                modelView = scope.model;\r\n            \r\n            autosize(input);\r\n            //from keyboard actions\r\n            Rx.Observable.fromEvent(input, 'focus')\r\n            .filter((): boolean => {\r\n                return typeof scope.queryValue !== 'undefined' && controller.orchestrator.getQuery().length === 0;\r\n            })\r\n            .subscribe(() => {\r\n                controller.instanceOrchestrator();\r\n            });\r\n\r\n            Rx.Observable.fromEvent(input, 'keydown')\r\n            .map((e: KeyboardEvent): IQueryMapKeyboard => {\r\n                if (e.keyCode === KeyCodes.KEY_RETURN) {\r\n                    e.preventDefault();\r\n                }\r\n                return <IQueryMapKeyboard>{ e: e, keyCode: e.keyCode, isCtrl: e.ctrlKey, value: '', field: <HTMLTextAreaElement>input };\r\n            })\r\n            .do((info: IQueryMapKeyboard): void => {\r\n                controller.setTypedQuery(info.field.value);\r\n                autosize.update(input);\r\n            })\r\n            .filter((info: IQueryMapKeyboard): boolean => {\r\n                return Boolean(info.keyCode === KeyCodes.KEY_BACK_SPACE || info.keyCode === KeyCodes.KEY_DELETE || (info.isCtrl && (info.keyCode === KeyCodes.KEY_X)));\r\n            })\r\n            .distinctUntilChanged()\r\n            .subscribe((info: IQueryMapKeyboard): void => {\r\n                controller.setDeleteStatement(info);\r\n            });\r\n\r\n            Rx.Observable.fromEvent(input, 'keyup')\r\n            .map((e: KeyboardEvent): IQueryMapKeyboard => {\r\n                return <IQueryMapKeyboard>{ e: e, keyCode: e.keyCode, value: controller.filterText((<HTMLTextAreaElement>input).value).trim(), field: <HTMLTextAreaElement>input };\r\n            })\r\n            .do((info: IQueryMapKeyboard): void => {\r\n                controller.keyValidations(info);\r\n                if(controller.setCursorPositionWhenRange(info) && info.keyCode !== KeyCodes.KEY_BACK_SPACE) {\r\n                    info.field.value = info.field.value + \"''\";\r\n                    info.field.setSelectionRange(info.field.value.length - 1, info.field.value.length - 1);\r\n                }\r\n            })\r\n            .filter((info: IQueryMapKeyboard): boolean => {\r\n                return controller.setStatusValidity(info);\r\n            })\r\n            .distinctUntilChanged()\r\n            .subscribe((info: IQueryMapKeyboard): void => {\r\n                controller.setNextState(info.value, info.field.selectionStart, info.keyCode === KeyCodes.KEY_RETURN);\r\n            });\r\n\r\n            //from new search action\r\n            Rx.Observable\r\n            .from(newSearchLink).subscribe((link: any) => {\r\n              Rx.Observable.fromEvent(link, 'click')\r\n                .subscribe(() => {\r\n                    controller.deleteAllFragments();\r\n                    (<HTMLTextAreaElement>input).value = \"\";\r\n                    autosize.update(input);\r\n                    scope.queryValue = null;\r\n                    if(scope.onNewSearch) {\r\n                        scope.onNewSearch();\r\n                        scope.$root.$broadcast(queryBuilderConstant.EVENTS.ON_NEW_SEARCH);\r\n                    }\r\n                    scope.$apply();\r\n                });\r\n            });\r\n\r\n            //from search action\r\n            Rx.Observable.fromEvent(searchButton, 'click')\r\n            .subscribe(() => {\r\n                let field = <HTMLTextAreaElement>input;\r\n                controller.setNextState(controller.filterText(field.value), field.selectionStart, true);\r\n            });\r\n\r\n            //watchers\r\n            scope.$watch('this.model', (vm: Object): void => {\r\n                controller.orchestrator = new query.core.Orchestrator(vm);\r\n                autosize.update(input);\r\n                if (controller.selected) {\r\n                    input.value = controller.selected\r\n                } else {\r\n                    input.value = \"\";\r\n                    autosize.update(input);\r\n                }\r\n            });\r\n\r\n            scope.isInputEmpty = (): boolean => {\r\n                let inputValue = (<HTMLTextAreaElement>input).value;\r\n                return !inputValue.length;\r\n            }\r\n        }\r\n\r\n        return directive;\r\n    }\r\n\r\n    angular\r\n    .module(CPALS.modules.directives.MAIN)\r\n    .directive('queryBuilder', queryBuilder);\r\n}\r\n"],"sourceRoot":"/source/"}