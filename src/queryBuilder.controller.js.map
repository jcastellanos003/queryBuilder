{"version":3,"sources":["directives/queryBuilder/queryBuilder.controller.ts"],"names":[],"mappings":"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","file":"directives/queryBuilder/queryBuilder.controller.js","sourcesContent":["/// <reference path=\"../../../../../../../typings/angularjs/angular.d.ts\" />\r\n\r\nimport './queryBuilder.service';\r\n\r\nimport { IOrchestrator } from './core/orchestrator';\r\nimport { IQueryTranspiler } from './core/transpiler';\r\nimport { IQueryBuilderController, IQueryBuilderScope, IQueryBuilderService } from './models/component';\r\nimport { IQueryMapKeyboard } from './models/helpers';\r\n\r\nimport { query } from './core/orchestratorObject';\r\nimport { transpiler } from './core/queryTranspiler';\r\nimport { QueryElement } from './core/queryElement';\r\nimport { QueryState } from './models/objects';\r\n\r\nmodule widgets {\r\n    'use strict';\r\n\r\n    declare var CPALS: any;\r\n\r\n    class QueryBuilderController implements IQueryBuilderController {\r\n        selected: string;\r\n        currentValue: string;\r\n        current: Object;\r\n        orchestrator: IOrchestrator;\r\n        queryTranspiler: IQueryTranspiler;\r\n        shouldSearch: boolean;\r\n        currentPosition: number;\r\n        $scope: IQueryBuilderScope;\r\n\r\n        static $inject = [\"$rootScope\", \"$scope\", \"$timeout\", \"QueryBuilderService\"];\r\n        constructor(private $rootScope: ng.IRootScopeService, $scope: IQueryBuilderScope, \r\n        private $timeout: any, private QueryBuilderService: IQueryBuilderService) {\r\n            this.$scope = $scope;\r\n            this.orchestrator = new query.core.Orchestrator(this.$scope.model);\r\n            this.queryTranspiler = new transpiler.core.ESQueryTranspiler();\r\n            this.updateInputState(QueryState.DO, true);\r\n            //when there is an instance of the orchestrator class\r\n            this.instanceOrchestrator();\r\n        }\r\n\r\n        instanceOrchestrator(): void {\r\n            if (!this.$scope.queryValue) return;\r\n            this.shouldSearch = true;\r\n            this.selected = this.$scope.queryValue.map((x: QueryElement) => { return x.text }).join(' ');\r\n            this.$scope.queryValue.forEach((x: any): void => {\r\n                this.orchestrator.addTerm(x.text);\r\n            });\r\n            this.updateParentData();\r\n        }\r\n\r\n        filterText(value: string): string {\r\n            return this.QueryBuilderService.filterText(this.orchestrator, value);\r\n        }\r\n\r\n        setNextState(value: string, position: number, shouldSearch: boolean): void {\r\n            this.shouldSearch = this.QueryBuilderService.validShouldSearch(shouldSearch, this.orchestrator.getIsOrderBy(), this.orchestrator.getCurrentState());\r\n            this.setCurrentPosition(position);\r\n            this.addNextTerm(value, position);\r\n        }\r\n\r\n        bindAllModel(item: string, $event: any): void {\r\n            let modelResult = this.QueryBuilderService.bindAllModel(this.orchestrator, $event.target.value, item, $event.target.selectionStart);\r\n            this.selected = modelResult.value;\r\n            $event.target.selectionStart = modelResult.position;\r\n            this.setNextState(item, modelResult.position, false);\r\n        }\r\n\r\n        handleQueryPasted($event: any): void {\r\n            this.$timeout((): void => {\r\n                this.QueryBuilderService.handleCopiedText($event.target, this.orchestrator);\r\n                this.setCurrentPosition($event.target.selectionStart);\r\n                this.updateInputState(QueryState.DO);\r\n            });\r\n        }\r\n\r\n        getNextTerms($viewValue: string): Array<string> {\r\n            return this.QueryBuilderService.getNextTerms(this.currentPosition, this.currentValue, this.orchestrator);\r\n        }\r\n\r\n        deleteAllFragments(): void {\r\n            this.orchestrator.removeAllTerms();\r\n            this.updateInputState(QueryState.DO, true);\r\n            this.setTableViewQuery(null);\r\n            this.QueryBuilderService.resetReplaceEvent();\r\n        }\r\n\r\n        keyValidations(info: IQueryMapKeyboard): void {\r\n            this.detectQueryChanges(info);\r\n            this.validStatusQuery(info);\r\n        }\r\n\r\n        setDeleteStatement(info: IQueryMapKeyboard): void {\r\n            this.currentValue = info.field.value;\r\n            this.setCurrentPosition(info.field.selectionStart);\r\n            if (info.field.selectionStart === 0) this.deleteAllFragments();\r\n            this.QueryBuilderService.resetTermsWhenDeletePerformed(info, this.orchestrator);\r\n        }\r\n\r\n        setStatusValidity(info: IQueryMapKeyboard): boolean {\r\n            return this.QueryBuilderService.validStatus(info, this.orchestrator);\r\n        }\r\n\r\n        setTypedQuery(value: string): void {\r\n            this.QueryBuilderService.resetTypedQuery(value);\r\n        }\r\n\r\n        setCursorPositionWhenRange(info: IQueryMapKeyboard): boolean {\r\n            return this.QueryBuilderService.getSimpleQuotesFromRange(this.orchestrator, info);\r\n        }\r\n\r\n        getCursorPosition($event: any): void {\r\n            this.setCurrentPosition($event.target.selectionStart);\r\n        }\r\n\r\n        setTableViewRawQuery(query: Array<QueryElement>): void {\r\n            if (this.$scope.tableView) {\r\n                this.$scope.tableView.setRawQuery(query);\r\n            }\r\n        }\r\n\r\n        private validStatusQuery(info: IQueryMapKeyboard): void {\r\n            this.setCurrentPosition(info.field.selectionStart);\r\n            if(this.QueryBuilderService.validStatusQuery(info, this.orchestrator, this.currentPosition))\r\n                this.updateInputState(QueryState.DO, true);\r\n            else\r\n                this.updateInputState(QueryState.WRITING);\r\n        }\r\n\r\n        private detectQueryChanges(info: IQueryMapKeyboard): void {\r\n            this.QueryBuilderService.detectQueryChanges(info, this.orchestrator);\r\n        }\r\n\r\n        private updateInputState(state: number, isValid: boolean = this.orchestrator.isValidQuery()): void {\r\n            this.$timeout(() => {\r\n                this.current = this.QueryBuilderService.updateQueryState(state, isValid);\r\n            });\r\n        }\r\n\r\n        private addNextTerm(value: string, position: number): void {\r\n            if(this.QueryBuilderService.addNextTerm(value, position, this.orchestrator, false)) {\r\n                this.updateQueryState(QueryState.DO);\r\n            }\r\n            this.updateInputState(QueryState.DO);\r\n        }\r\n\r\n        private setCurrentPosition(position: number): void {\r\n            this.currentPosition = position;\r\n        }\r\n\r\n        private updateQueryState(state: number): void {\r\n            if(state === QueryState.DO && this.orchestrator.isValidQuery()) this.updateParentData();\r\n            this.updateInputState(state);\r\n        }\r\n\r\n        private updateParentData(): void {\r\n            if(!this.shouldSearch) return;\r\n            this.QueryBuilderService.handleOpenWindow(this.$scope.openNewWindow, this.$scope.onBeforeOpenNewWindow)\r\n            this.setTableViewQuery(this.queryTranspiler.transpileQuery(this.orchestrator.getQuery()));\r\n        }\r\n\r\n        private reloadParentData(firstDelete: boolean): void {\r\n            if(!this.orchestrator.isValidQuery() && !firstDelete) return;\r\n            this.setTableViewQuery(firstDelete || this.orchestrator.getQuery().length === 2 ? null : this.queryTranspiler.transpileQuery(this.orchestrator.getQuery()));\r\n        }\r\n\r\n        private setTableViewQuery(query: string): void {\r\n            if(this.$scope.tableView) {\r\n                this.$rootScope.$broadcast('ShowColumnsFromQueryBuilder', this.orchestrator.getQuery());\r\n                this.$scope.tableView.setQuery(query);\r\n                this.resetSortIndicator();\r\n                if(!query) {\r\n                    this.$rootScope.$broadcast('ShowHideColumns');\r\n                    this.setTableViewRawQuery(undefined);\r\n                } else {\r\n                    this.setTableViewRawQuery(this.orchestrator.getQuery().slice());\r\n                }\r\n            }\r\n        }\r\n\r\n        private resetSortIndicator(): void {\r\n            this.$timeout(() => {\r\n                if (this.orchestrator.getIsOrderBy()) {\r\n                    this.$scope.tableView.clearSorts();\r\n                } else {\r\n                    this.$scope.tableView.setDefaultSort();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    angular\r\n    .module(CPALS.modules.directives.MAIN)\r\n    .controller('QueryBuilderController', QueryBuilderController);\r\n}"],"sourceRoot":"/source/"}